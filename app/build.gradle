apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    useLibrary 'android.test.runner'

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            // rename package file
            String name = "-${variant.versionName}-(${variant.versionCode})"
            output.outputFileName = output.outputFile.name.replace(".apk", name + ".apk")
        }
    }

    defaultConfig {
        applicationId "net.maxsmr.mxstemplate"

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
                includeCompileClasspath = true
            }
        }
    }

    compileOptions {
        sourceCompatibility sourceCompatibilityVersion
        targetCompatibility sourceCompatibilityVersion
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin/'
            test.java.srcDirs += 'src/test/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
            test.resources.srcDirs += 'src/test/res'
            androidTest.resources.srcDirs += 'src/androidTest/res'
        }
        network {
            java.srcDirs += 'src/network/kotlin/'
            test.java.srcDirs += 'src/test/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
            test.resources.srcDirs += 'src/test/res'
            androidTest.resources.srcDirs += 'src/androidTest/res'
        }
        no_network {
            java.srcDirs += 'src/no_network/kotlin/'
            test.java.srcDirs += 'src/test/kotlin'
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
            test.resources.srcDirs += 'src/test/res'
            androidTest.resources.srcDirs += 'src/androidTest/res'
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //default dimension to satisfy gradle
    flavorDimensions "type"

    productFlavors {

        network {
            versionCode 1
            versionName = "1.0"
            dimension "type"
        }

        no_network {
            versionCode 1
            versionName = "1.0"
            dimension "type"
        }
    }

    dexOptions {
        javaMaxHeapSize "4G"
    }

    kotlinOptions {
        jvmTarget = jvmVersion
        freeCompilerArgs = ["$jvmDefaultArg"]
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

//    implementation project(":core-common")
    implementation project(":core-network")

//    implementation "androidx.fragment:fragment:$androidxFragmentVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    // Dagger annotation processor
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomPersistenceVersion"
    kapt "androidx.room:room-compiler:$roomPersistenceVersion"
    implementation "androidx.room:room-ktx:$roomPersistenceVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Tests
    testImplementation "androidx.test:core:$testCoreVersion"
    testImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    testImplementation "androidx.test:rules:$testCoreVersion"
    testImplementation "junit:junit:$jUnitVersion"
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    testImplementation "androidx.test:runner:$testCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    androidTestImplementation "androidx.test:core:$testCoreVersion"
    androidTestImplementation "androidx.test.ext:junit:$jUnitExtVersion"
    androidTestImplementation "androidx.test:rules:$testCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test:runner:$testCoreVersion"
    androidTestImplementation "androidx.room:room-testing:$roomPersistenceVersion"
}